#!/usr/bin/env ruby
$:.unshift(File.expand_path('../../lib', __FILE__))

require 'panda_corps'

class ExampleWorker < PandaCorps::Worker
  def initialize
    consume :result

    before { puts "HEY I STARTED" }
    work { info "hello, world" }
    work InputWorker
    work AdderWorker
    work { info "Result: #{self.result}" }
    after { puts "HEY I FINISHED" }
  end
end

class InputWorker < PandaCorps::Worker

  def initialize
    produce :data1
    produce :data2, String

    work do
      int1 = nil
      int2 = nil
      info "type a number"
      debug "whatever"
      error "bad thing"
      int1 = Integer(gets)
      info "type another number"
      int2 = Integer(gets)
      self.data1 = int1
      self.data2 = int2
    end
  end
end

class AdderWorker < PandaCorps::Worker
  def initialize
    consume :data1, Integer
    consume :data2, Integer
    produce :result

    work do
      self.result = data1 + data2
    end
  end
end

class PrinterManager < PandaCorps::Manager
  def on_info message, opts, worker
    puts "#{worker.name} said, \"#{message}.\""
  end

  def on_worker_start worker
    puts "HEY #{worker.title} STARTED"
  end

  def on_worker_finish worker
    puts "HEY #{worker.title} FINISHED"
  end

  def on_work_start work, worker
    puts "#{worker.name} is working on #{work}"
  end

  def on_work_finish work, worker
    puts "#{worker.name} is done with #{work}"
  end
end

class StatsManager < PandaCorps::Manager
  def initialize
    @stats = {}
    @overall_start_time
    @should_i_report = true
  end

  def on_manage_start worker
    puts "STARTING STATS TRACKING"
    @overall_start_time = Time.now
  end

  def on_manage_finish worker
    if @should_i_report
      puts "#{Time.now - @overall_start_time} was total run time"
    else
      puts "well, it was a bad job, so forget reporting :P"
    end
  end

  def on_worker_start worker
    @stats[worker.title] = Time.now
  end

  def on_worker_accomplished worker
    puts "YAY #{worker.name} IS ACCOMPLISHED"
  end

  def on_worker_finish worker
    puts "#{(Time.now - @stats[worker.title])} for #{worker.title}"
  end

  def on_bad_job error, worker
    @should_i_report = false
    puts "#{worker.title}, MEH!"
  end

end

manager = PandaCorps::Executive.new
manager.add_assistant(PrinterManager.new)
manager.add_assistant(StatsManager.new)

manager.manage(ExampleWorker.new)
